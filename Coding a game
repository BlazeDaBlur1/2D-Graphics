Screen class where all of the visual stuff is created:

package com.Sun.Rain.graphics;

import java.util.Random;

public class Screen {

	private int width, height;
	public int[] pixels;
	Random as = new Random();
	
	int xtime = 0, ytime = 0;
	int counter = 0;
	int xspeed = as.nextInt(20) + 5;
	int yspeed = as.nextInt(20) + 5;
	
	public Screen(int width, int height) {
		this.width = width;
		this.height = height;
		pixels = new int[width * height];
		
	}
	
	public void clear() {
		for (int i = 0; i < pixels.length; i++) {
			pixels[i] = 0;
		}
	}
	
	public void render() {
		counter++;
		if (counter % xspeed == 0) xtime++;
		if (counter % yspeed == 0) ytime++;
		for (int y = 0; y < height; y++) {
			if (ytime >= height) break;
			for (int x = 0; x < width; x++) {
				if (xtime >= width) break;
				pixels[xtime + ytime * width] = 0xff00ff;
			}
		}
	}
	
}
and actual game class where everything is run:

package com.Sun.Rain;

import java.awt.Canvas;
import java.awt.image.DataBufferInt;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;

import com.Sun.Rain.graphics.Screen;

public class Game extends Canvas implements Runnable {
	
	private static final long serialVersionUID = 1L;
	public static int Width = 300;
    public static int Height = 168;
    public static int Scale = 3;
    
    public static String title = "Game II";
    
    private Thread thread;
    private JFrame frame;
    private boolean running = false;
    
    private Screen screen;
    
    private BufferedImage image = new BufferedImage(Width, Height, BufferedImage.TYPE_INT_RGB);
    private int[] pixels = (((DataBufferInt) image.getRaster().getDataBuffer()).getData());
   
    public Game() {
    	Dimension size = new Dimension(Width * Scale, Height * Scale);
    	setPreferredSize(size);
    	screen = new Screen(Width, Height);
    	
    	frame = new JFrame();
    }
    
    public synchronized void start() {
    	running = true;
        thread = new Thread((Runnable) this, "Display");
        thread.start();
    }
    
    public synchronized void stop() {
    	running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    
    public void run() {
    	long lastTime = System.nanoTime();
    	long timer = System.currentTimeMillis();
    	final double ns = 1000000000.0 / 60.0;
    	double delta = 0;
    	int frames = 0;
    	int updates = 0;
        while(running == true) {
        	long now = System.nanoTime();
        	delta += (now - lastTime) / ns;
        	lastTime = now;
        	while (delta >= 1) {
        		update();
        		updates++;
        		delta--;
        	}
        	render();
        	frames++;
        	
        	if (System.currentTimeMillis() - timer > 1000) {
        		timer += 1000;
        		System.out.println(updates + " ups, " + frames + " frames");
        		frame.setTitle(title + "   |   " + updates + " ups, " + frames + " fps");
        		updates = 0;
        		frames = 0;
        	}
        }
        stop();
    }
    
    public void update() {
    }
    
    public void render() {
    	BufferStrategy bs = getBufferStrategy();
    	if (bs == null) {
    		createBufferStrategy(3);
    		return;
    	}
    	
    	screen.clear();
    	screen.render();
    	
    	for (int i = 0; i < pixels.length; i++) {
    		pixels[i] = screen.pixels[i];
    	}
    	
    	Graphics g = bs.getDrawGraphics();
    	g.setColor(Color.black);
    	g.fillRect(0, 0, getWidth(), getHeight());
    	g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
    	g.dispose();
    	bs.show();
    }
    
    public static void main(String[] args) {
    	Game game = new Game();
    	game.frame.setResizable(false);
    	game.frame.setTitle(game.title);
    	game.frame.add(game);
    	game.frame.pack();
    	game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    	game.frame.setLocationRelativeTo(null);
    	game.frame.setVisible(true);
    	
    	game.start();
    }
    
    
}
